---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";

const locale = (Astro.locals.lang as 'en' | 'fr') ?? 'en';
---

<Layout>
  <div class="container mx-auto p-3 sm:p-4 md:p-6 space-y-4 sm:space-y-6">
    <div class="text-center mb-4 sm:mb-6 md:mb-8">
      <h1 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-base-content mb-2">{ui[locale].generator.title}</h1>
      <p class="text-sm sm:text-base md:text-lg text-base-content/70 px-4">{ui[locale].generator.subtitle}</p>
    </div>

    <!-- Section 1: Input avec textarea et boutons -->
    <div class="card bg-base-100 shadow-xl mb-4 sm:mb-6">
      <div class="card-body p-4 sm:p-6">
        <h2 class="card-title text-lg sm:text-xl md:text-2xl mb-3 sm:mb-4 flex-col sm:flex-row items-start sm:items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
          </svg>
          <span class="break-words">{ui[locale].generator.promptTitle}</span>
        </h2>
        
        <!-- Sélecteur de modèle IA -->
        <div class="form-control mb-3 sm:mb-4">
          <label class="label">
            <span class="label-text text-sm sm:text-base">
              <svg xmlns="http://www.w3.org/2000/svg" class="inline h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              Modèle d'IA
            </span>
            <span class="label-text-alt text-xs">Choisissez le modèle de génération</span>
          </label>
          <select id="ai-model-select" class="select select-bordered w-full text-sm sm:text-base">
            <option value="openai/gpt-4o">GPT-4o (Recommandé) - Plus créatif</option>
            <option value="openai/gpt-4o-mini" selected>GPT-4o Mini - Rapide et efficace</option>
            <option value="openai/gpt-3.5-turbo">GPT-3.5 Turbo - Économique</option>
            <option value="openai/gpt-oss-20b:free">GPT OSS 20B - Gratuit</option>
            <option value="anthropic/claude-3.5-sonnet">Claude 3.5 Sonnet - Très détaillé</option>
            <option value="anthropic/claude-3-haiku">Claude 3 Haiku - Ultra rapide</option>
            <option value="google/gemini-pro">Gemini Pro - Google</option>
          </select>
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text text-sm sm:text-base">{ui[locale].generator.promptLabel}</span>
          </label>
          <textarea 
            class="textarea textarea-bordered h-24 sm:h-32 resize-none text-sm sm:text-base" 
            placeholder={ui[locale].generator.promptPlaceholder}
            id="user-prompt"
          ></textarea>
        </div>
        <div class="card-actions flex-col sm:flex-row justify-center sm:justify-end mt-3 sm:mt-4 gap-2">
          <button class="btn btn-primary btn-sm sm:btn-md lg:btn-lg w-full sm:w-auto" id="generateBtn">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 mr-1 sm:mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
            {ui[locale].generator.generateButton}
          </button>

          <button class="btn btn-secondary btn-sm sm:btn-md lg:btn-lg w-full sm:w-auto" id="editBtn">
            ✏️ {ui[locale].generator.editButton}
          </button>

          <button class="btn btn-success btn-sm sm:btn-md lg:btn-lg w-full sm:w-auto" id="saveBtn" disabled>
            {ui[locale].generator.saveButton}
          </button>
        </div>
      </div>
    </div>

    <!-- Interface utilisateur selon la consigne : deux parties principales -->
    <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6">
      
      <!-- Partie 1: Zone d'affichage SVG (avec divider et chat bubble selon la consigne) -->
      <div class="card bg-base-100 shadow-xl order-2 xl:order-1">
        <div class="card-body p-4 sm:p-6">
          <h2 class="card-title text-base sm:text-lg md:text-xl mb-2 sm:mb-4 flex-col sm:flex-row items-start sm:items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <span>{ui[locale].generator.previewTitle}</span>
          </h2>
          
          <!-- Divider selon DaisyUI -->
          <div class="divider text-xs sm:text-sm">{ui[locale].generator.previewDivider}</div>
          
          <!-- Zone d'affichage du SVG -->
          <div class="border-2 border-dashed border-base-300 rounded-lg min-h-64 sm:min-h-80 md:min-h-96 flex items-center justify-center bg-base-50 p-2 sm:p-4" id="svg-container">
            <p class="text-sm sm:text-base md:text-lg font-medium text-base-content/50 text-center px-2">{ui[locale].generator.previewPlaceholder}</p>
          </div>
          
          <!-- Actions pour le SVG -->
          <div class="card-actions justify-center mt-3 sm:mt-4 gap-2 flex-wrap">
            <button class="btn btn-outline btn-xs sm:btn-sm flex-1 sm:flex-none min-w-[120px]" id="copyBtn" disabled>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              Copier
            </button>
            <button class="btn btn-info btn-xs sm:btn-sm flex-1 sm:flex-none min-w-[120px]" id="downloadBtn" disabled>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Télécharger
            </button>
          </div>
        </div>
      </div>

      <!-- Partie 2: Zone de chat pour l'historique des échanges -->
      <div class="card bg-base-100 shadow-xl order-1 xl:order-2">
        <div class="card-body p-4 sm:p-6">
          <h2 class="card-title text-base sm:text-lg md:text-xl mb-2 sm:mb-4 flex-col sm:flex-row items-start sm:items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            <span>{ui[locale].generator.chatTitle}</span>
          </h2>
          
          <!-- Divider selon DaisyUI -->
          <div class="divider text-xs sm:text-sm">{ui[locale].generator.chatDivider}</div>
          
          <!-- Zone de chat avec chat bubbles selon DaisyUI -->
          <div class="h-64 sm:h-80 md:h-96 overflow-y-auto bg-base-50 rounded-lg p-2 sm:p-4" id="chat-container">
            <div class="flex justify-center">
              <p class="text-xs sm:text-sm text-base-content/50 text-center px-2">{ui[locale].generator.chatPlaceholder}</p>
            </div>
          </div>
          
          <!-- Zone d'entrée pour nouveaux prompts -->
          <div class="divider text-xs sm:text-sm">{ui[locale].generator.chatInputDivider}</div>
          <div class="form-control">
            <div class="input-group flex gap-2">
              <input 
                type="text" 
                placeholder={ui[locale].generator.chatInputPlaceholder}
                class="input input-bordered input-sm sm:input-md flex-1 text-sm sm:text-base" 
                id="chat-input"
              />
              <button class="btn btn-square btn-sm sm:btn-md" id="sendPromptBtn">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
  //@ts-nocheck
  // Variables globales
  let currentSvgCode = '';
  let promptList = [];

  // Fonction pour générer le SVG avec le modèle sélectionné
  async function generateSVG(promptList) {
    const selectedModel = document.getElementById('ai-model-select')?.value || 'openai/gpt-4o-mini';
    
    const res = await fetch('/api/generateSVG', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        messages: promptList,
        model: selectedModel 
      }),
    });
    const data = await res.json();
    return data.svg;
  }

  // Fonction pour ajouter un message au chat avec chat bubble DaisyUI
  function addMessageToChat(content, isUser = true, isSVG = false) {
    const chatContainer = document.getElementById('chat-container');
    
    // Supprimer le message initial si présent
    const initialMessage = chatContainer.querySelector('.flex.justify-center');
    if (initialMessage) initialMessage.remove();
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat ${isUser ? 'chat-end' : 'chat-start'}`;
    
    const chatBubble = document.createElement('div');
    chatBubble.className = `chat-bubble ${isUser ? 'chat-bubble-primary' : 'chat-bubble-secondary'}`;
    
    if (isSVG) {
      const pre = document.createElement('pre');
      pre.className = 'whitespace-pre-wrap break-all text-xs';
      pre.textContent = content;
      chatBubble.appendChild(pre);
    } else {
      chatBubble.textContent = content;
    }

    const chatHeader = document.createElement('div');
    chatHeader.className = 'chat-header';
    chatHeader.textContent = isUser ? 'Vous' : 'IA';
    
    messageDiv.appendChild(chatHeader);
    messageDiv.appendChild(chatBubble);
    chatContainer.appendChild(messageDiv);
    
    chatContainer.scrollTop = chatContainer.scrollHeight;
  }

  // Fonction pour nettoyer l'historique avant sauvegarde
  function cleanChatHistory(promptList) {
    return promptList.map(msg => ({
      role: msg.role,
      content: msg.content
    })).filter(msg => msg.content && !msg.refusal && !msg.reasoning);
  }

  // Fonction pour extraire seulement le dernier prompt utilisateur
  function getLastUserPrompt(promptList) {
    const userPrompts = promptList.filter(msg => msg.role === 'user');
    return userPrompts.length > 0 ? userPrompts[userPrompts.length - 1].content : "Prompt non disponible";
  }

  // --- Génération (nouvelle création) ---
  async function handleSubmit() {
    let prompt = document.getElementById("user-prompt")?.value || "";
    
    if (!prompt.trim()) {
      alert("Veuillez entrer une description pour générer le SVG.");
      return;
    }
    
    addMessageToChat(prompt, true);

    promptList.length = 0; 
    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    const generateButton = document.getElementById("generateBtn");

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;

    try {
      const aiResponse = await generateSVG(promptList);

      let cleanContent = aiResponse.content;
      if (cleanContent.includes('```svg')) {
        cleanContent = cleanContent.replace(/```svg\s*/, '').replace(/```\s*$/, '');
      }

      const svgMatch = cleanContent.match(/<svg[\s\S]*?<\/svg>/i);
      const svgCode = svgMatch ? svgMatch[0] : "";

      promptList.push({ role: 'assistant', content: svgCode });
      
      // Ajouter le SVG réel au chat
      addMessageToChat(svgCode, false, true);

      svgContainer.innerHTML = svgCode;
      currentSvgCode = svgCode;

      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const downloadBtn = document.getElementById("downloadBtn");
      const hasCode = svgCode && svgCode.trim().length > 0;
      if (saveBtn) saveBtn.disabled = !hasCode;
      if (copyBtn) copyBtn.disabled = !hasCode;
      if (downloadBtn) downloadBtn.disabled = !hasCode;
      
      document.getElementById("user-prompt").value = "";

    } catch (error) {
      console.error("Erreur lors de la génération:", error);
      svgContainer.innerHTML = `<p class="text-error">Erreur lors de la génération du SVG</p>`;
      addMessageToChat("Erreur lors de la génération du SVG", false);
      alert("Erreur lors de la génération du SVG. Veuillez réessayer.");
    } finally {
      generateButton.disabled = false;
    }
  }

  // --- Édition (modification du SVG existant) ---
  async function handleEdit() {
    let prompt = document.getElementById("user-prompt")?.value || "";
    
    if (!prompt.trim()) {
      alert("Veuillez entrer une modification pour éditer le SVG.");
      return;
    }
    
    if (promptList.length === 0) {
      alert("Veuillez d'abord générer un SVG avant de l'éditer.");
      return;
    }
    
    addMessageToChat(prompt, true);
    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    const editButton = document.getElementById("editBtn");
    const generateButton = document.getElementById("generateBtn");

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    try {
      const aiResponse = await generateSVG(promptList);

      let cleanContent = aiResponse.content;
      if (cleanContent.includes('```svg')) {
        cleanContent = cleanContent.replace(/```svg\s*/, '').replace(/```\s*$/, '');
      }

      const svgMatch = cleanContent.match(/<svg[\s\S]*?<\/svg>/i);
      const svgCode = svgMatch ? svgMatch[0] : "";

      promptList.push({ role: 'assistant', content: svgCode });
      
      addMessageToChat(svgCode, false, true);
      svgContainer.innerHTML = svgCode;
      currentSvgCode = svgCode;

      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const downloadBtn = document.getElementById("downloadBtn");
      const hasCode = svgCode && svgCode.trim().length > 0;
      if (saveBtn) saveBtn.disabled = !hasCode;
      if (copyBtn) copyBtn.disabled = !hasCode;
      if (downloadBtn) downloadBtn.disabled = !hasCode;

      document.getElementById("user-prompt").value = "";

    } catch (error) {
      console.error("Erreur lors de l'édition:", error);
      svgContainer.innerHTML = `<p class="text-error">Erreur lors de l'édition du SVG</p>`;
      addMessageToChat("Erreur lors de l'édition du SVG", false);
      alert("Erreur lors de l'édition du SVG. Veuillez réessayer.");
    } finally {
      generateButton.disabled = false;
      editButton.disabled = false;
    }
  }

  // --- Fonction pour envoyer un prompt depuis le chat ---
  async function handleChatPrompt() {
    const chatInput = document.getElementById("chat-input");
    let prompt = chatInput?.value || "";
    
    if (!prompt.trim()) {
      alert("Veuillez entrer un prompt.");
      return;
    }
    
    document.getElementById("user-prompt").value = prompt;
    chatInput.value = "";
    
    if (promptList.length === 0) {
      await handleSubmit();
    } else {
      await handleEdit();
    }
  }

  // Event listeners
  const generateButton = document.getElementById("generateBtn");
  if (generateButton) generateButton.addEventListener("click", handleSubmit);

  const editButton = document.getElementById("editBtn");
  if (editButton) editButton.addEventListener("click", handleEdit);

  const sendPromptButton = document.getElementById("sendPromptBtn");
  if (sendPromptButton) sendPromptButton.addEventListener("click", handleChatPrompt);

  const chatInput = document.getElementById("chat-input");
  if (chatInput) {
    chatInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") handleChatPrompt();
    });
  }

  // --- Sauvegarde dans PocketBase ---
  async function saveSVG(name, code, chat_history, userId) {
    const res = await fetch("http://127.0.0.1:8090/api/collections/svgs/records", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        name: name, 
        code: code,
        chat_history: getLastUserPrompt(promptList),
        user: userId
      }),
    });

    if (!res.ok) {
      const errorData = await res.json();
      console.error("Erreur PocketBase:", errorData);
      throw new Error("Erreur lors de l'enregistrement du SVG");
    }

    return await res.json();
  }

  async function handleSave() {
    const code = currentSvgCode;
    if (!code || !String(code).trim()) {
      alert("Aucun code SVG disponible. Générer un SVG d'abord.");
      return;
    }

    // Récupération de l'utilisateur depuis le localStorage
    const userStr = localStorage.getItem("user");
    if (!userStr) {
      alert("Vous devez être connecté pour sauvegarder un SVG.");
      window.location.href = "/login";
      return;
    }

    const user = JSON.parse(userStr);
    if (!user.id) {
      alert("Erreur : informations utilisateur invalides.");
      return;
    }

    const name = prompt("Choisissez un nom pour votre SVG :");
    if (!name) return;

    try {
      const saved = await saveSVG(name, code, promptList, user.id);
      addMessageToChat(`SVG "${name}" sauvegardé avec succès !`, false);
      alert("SVG sauvegardé avec succès !");
    } catch (err) {
      console.error(err);
      const shouldDownload = confirm("Impossible d'enregistrer sur le serveur. Voulez-vous télécharger le SVG localement ?");
      if (shouldDownload) {
        const blob = new Blob([code], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = name.replace(/[^a-z0-9-_\.]/gi, '_') + '.svg';
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
        addMessageToChat(`SVG "${name}" téléchargé localement`, false);
      } else {
        alert("SVG non sauvegardé.");
      }
    }
  }

  const saveButton = document.getElementById("saveBtn");
  if (saveButton) saveButton.addEventListener("click", handleSave);

  // --- Téléchargement SVG ---
  const downloadButton = document.getElementById("downloadBtn");
  if (downloadButton) {
    downloadButton.addEventListener("click", () => {
      const code = currentSvgCode;
      if (!code || !code.trim()) {
        return alert('Aucun SVG à télécharger.');
      }

      // Demander un nom de fichier
      const fileName = prompt("Nom du fichier SVG :", "mon-svg") || "svg-generated";
      const sanitizedName = fileName.replace(/[^a-z0-9-_\.]/gi, '_');

      // Créer un blob et télécharger
      const blob = new Blob([code], { type: 'image/svg+xml;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = sanitizedName + '.svg';
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);

      addMessageToChat(`SVG "${sanitizedName}.svg" téléchargé avec succès !`, false);
      
      // Toast notification
      const toast = document.createElement('div');
      toast.className = 'toast toast-top toast-center z-50';
      toast.innerHTML = `
        <div class="alert alert-success">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>SVG téléchargé avec succès !</span>
        </div>
      `;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    });
  }

  // --- Copie ---
  const copyButton = document.getElementById("copyBtn");
  if (copyButton) {
    copyButton.addEventListener("click", async () => {
      const code = currentSvgCode;
      if (!code) return alert('Aucun code à copier.');
      try {
        await navigator.clipboard.writeText(code);
        addMessageToChat("Code SVG copié dans le presse-papiers", false);
        alert('Code SVG copié dans le presse-papiers');
      } catch (err) {
        console.error(err);
        alert('Impossible de copier le code.');
      }
    });
  }
</script>


</Layout>