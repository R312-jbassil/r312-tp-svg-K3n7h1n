---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="container mx-auto p-4 space-y-6">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-base-content mb-2">Générateur SVG</h1>
      <p class="text-lg text-base-content/70">Décrivez votre SVG et laissez l'IA le créer pour vous</p>
    </div>
    <!-- bouton save -->
    <button class="btn btn-success btn-lg" id="saveBtn" disabled>
      Enregistrer SVG
    </button>
  </div>

  <!-- Section 1: Input avec textarea et boutons -->
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <h2 class="card-title text-2xl mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
        </svg>
        Prompt
      </h2>
      <div class="form-control">
        <label class="label">
          <span class="label-text">Décrivez le SVG que vous souhaitez générer</span>
        </label>
        <textarea 
          class="textarea textarea-bordered h-32 resize-none" 
          placeholder="Ex: Un chat bleu avec des yeux verts, assis sur une chaise rouge..."
          id="user-prompt"
        ></textarea>
      </div>
      <div class="card-actions justify-end mt-4 space-x-2">
        <button class="btn btn-primary btn-lg" id="generateBtn">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
          Générer SVG
        </button>

        <!-- Nouveau bouton Edit -->
        <button class="btn btn-secondary btn-lg" id="editBtn">
          ✏️ Edit
        </button>
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Section 2: Code généré -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
          </svg>
          Code SVG
        </h2>
        <div class="mockup-code bg-base-200 min-h-96">
          <pre data-prefix="$" class="text-warning"><code>En attente de génération...</code></pre>
          <pre id="codeOutput" class="hidden"><code></code></pre>
        </div>
        <div class="card-actions justify-end mt-4">
          <button class="btn btn-outline btn-sm" id="copyBtn" disabled>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            Copier
          </button>
        </div>
      </div>
    </div>

    <!-- Section 3: Aperçu SVG -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          Aperçu SVG
        </h2>
        <div class="border-2 border-dashed border-base-300 rounded-lg min-h-96 flex items-center justify-center bg-base-50" id="svg-container">
          <p class="text-lg font-medium text-base-content/50">Votre SVG apparaîtra ici</p>
        </div>
      </div>
    </div>
  </div>

<script>
  // Variables globales
  let currentSvgCode = '';
  let promptList = [];

  // Fonction pour générer le SVG
  async function generateSVG(promptList) {
    const res = await fetch('/api/generateSVG', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages: promptList }),
    });
    const data = await res.json();
    return data.svg;
  }

  // Fonction pour nettoyer l'historique avant sauvegarde (SOLUTION AU PROBLÈME)
  function cleanChatHistory(promptList) {
    return promptList.map(msg => ({
      role: msg.role,
      content: msg.content  // Seulement le contenu utile, pas les métadonnées
    })).filter(msg => msg.content && !msg.refusal && !msg.reasoning); // Filtrer les messages inutiles
  }

  // Fonction pour extraire seulement le dernier prompt utilisateur (MÉTHODE RECOMMANDÉE)
  function getLastUserPrompt(promptList) {
    const userPrompts = promptList.filter(msg => msg.role === 'user');
    return userPrompts.length > 0 ? userPrompts[userPrompts.length - 1].content : "Prompt non disponible";
  }

  // --- Génération (nouvelle création) ---
  async function handleSubmit() {
    let prompt = document.getElementById("user-prompt")?.value || "";
    
    if (!prompt.trim()) {
      alert("Veuillez entrer une description pour générer le SVG.");
      return;
    }
    
    console.log("Génération: ", prompt);

    // Réinitialiser l'historique pour une nouvelle génération
    promptList.length = 0; 
    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    const svgOutput = document.getElementById("codeOutput");
    const generateButton = document.getElementById("generateBtn");

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;

    try {
      const aiResponse = await generateSVG(promptList);

      // Nettoyer la réponse des balises markdown si nécessaire
      let cleanContent = aiResponse.content;
      if (cleanContent.includes('```svg')) {
        cleanContent = cleanContent.replace(/```svg\s*/, '').replace(/```\s*$/, '');
      }

      const svgMatch = cleanContent.match(/<svg[\s\S]*?<\/svg>/i);
      const svgCode = svgMatch ? svgMatch[0] : "";

      // Ajouter la réponse nettoyée à l'historique
      promptList.push({ role: 'assistant', content: svgCode });

      svgOutput.classList.remove("hidden");
      svgOutput.textContent = svgCode;
      svgContainer.innerHTML = svgCode;
      
      // Sauvegarder pour les autres fonctions
      currentSvgCode = svgCode;

      // Activer les boutons
      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const hasCode = svgCode && svgCode.trim().length > 0;
      if (saveBtn) saveBtn.disabled = !hasCode;
      if (copyBtn) copyBtn.disabled = !hasCode;
      
      console.log("Historique après génération:", promptList);
    } catch (error) {
      console.error("Erreur lors de la génération:", error);
      svgContainer.innerHTML = `<p class="text-error">Erreur lors de la génération du SVG</p>`;
      alert("Erreur lors de la génération du SVG. Veuillez réessayer.");
    } finally {
      generateButton.disabled = false;
    }
  }

  // --- Édition (modification du SVG existant) ---
  async function handleEdit() {
    let prompt = document.getElementById("user-prompt")?.value || "";
    
    if (!prompt.trim()) {
      alert("Veuillez entrer une modification pour éditer le SVG.");
      return;
    }
    
    if (promptList.length === 0) {
      alert("Veuillez d'abord générer un SVG avant de l'éditer.");
      return;
    }
    
    console.log("Édition: ", prompt);

    // Ajouter le nouveau prompt à l'historique existant
    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    const svgOutput = document.getElementById("codeOutput");
    const editButton = document.getElementById("editBtn");
    const generateButton = document.getElementById("generateBtn");

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    try {
      const aiResponse = await generateSVG(promptList);

      // Nettoyer la réponse des balises markdown si nécessaire
      let cleanContent = aiResponse.content;
      if (cleanContent.includes('```svg')) {
        cleanContent = cleanContent.replace(/```svg\s*/, '').replace(/```\s*$/, '');
      }

      const svgMatch = cleanContent.match(/<svg[\s\S]*?<\/svg>/i);
      const svgCode = svgMatch ? svgMatch[0] : "";

      // Ajouter la réponse nettoyée à l'historique
      promptList.push({ role: 'assistant', content: svgCode });

      svgOutput.classList.remove("hidden");
      svgOutput.textContent = svgCode;
      svgContainer.innerHTML = svgCode;
      
      // Sauvegarder pour les autres fonctions
      currentSvgCode = svgCode;

      // Activer les boutons
      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const hasCode = svgCode && svgCode.trim().length > 0;
      if (saveBtn) saveBtn.disabled = !hasCode;
      if (copyBtn) copyBtn.disabled = !hasCode;

      console.log("Historique après édition:", promptList);
    } catch (error) {
      console.error("Erreur lors de l'édition:", error);
      svgContainer.innerHTML = `<p class="text-error">Erreur lors de l'édition du SVG</p>`;
      alert("Erreur lors de l'édition du SVG. Veuillez réessayer.");
    } finally {
      generateButton.disabled = false;
      editButton.disabled = false;
    }
  }

  // Event listeners pour les boutons
  const generateButton = document.getElementById("generateBtn");
  if (generateButton) generateButton.addEventListener("click", handleSubmit);

  const editButton = document.getElementById("editBtn");
  if (editButton) editButton.addEventListener("click", handleEdit);

  // --- Sauvegarde dans PocketBase (CORRIGÉE POUR LE PROBLÈME D'AFFICHAGE) ---
  async function saveSVG(name, code, chat_history) {
    const res = await fetch("http://127.0.0.1:8090/api/collections/svgs/records", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        name: name, 
        code: code,
        // 🔧 SOLUTION 1: Stocker seulement le dernier prompt utilisateur (RECOMMANDÉ)
        chat_history: getLastUserPrompt(promptList)
        
        // 🔧 SOLUTION 2: Ou nettoyer l'historique complet (alternative)
        // chat_history: JSON.stringify(cleanChatHistory(promptList))
      }),
    });

    if (!res.ok) {
      const errorData = await res.json();
      console.error("Erreur PocketBase:", errorData);
      throw new Error("Erreur lors de l'enregistrement du SVG");
    }

    return await res.json();
  }

  async function handleSave() {
    const svgOutput = document.getElementById("codeOutput");
    const code = svgOutput.textContent;

    if (!code || !String(code).trim()) {
      alert("Aucun code SVG disponible. Générer un SVG d'abord.");
      return;
    }

    const name = prompt("Choisissez un nom pour votre SVG :");
    if (!name) return;

    try {
      // Sauvegarder avec le prompt nettoyé
      const saved = await saveSVG(name, code, promptList);
      console.log("SVG enregistré:", saved);
      console.log("Prompt sauvegardé:", getLastUserPrompt(promptList));
      alert("SVG sauvegardé avec succès !");
    } catch (err) {
      console.error(err);
      const shouldDownload = confirm("Impossible d'enregistrer sur le serveur. Voulez-vous télécharger le SVG localement ?");
      if (shouldDownload) {
        const blob = new Blob([code], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = name.replace(/[^a-z0-9-_\.]/gi, '_') + '.svg';
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      } else {
        alert("SVG non sauvegardé.");
      }
    }
  }

  const saveButton = document.getElementById("saveBtn");
  if (saveButton) saveButton.addEventListener("click", handleSave);

  // --- Copie ---
  const copyButton = document.getElementById("copyBtn");
  if (copyButton) {
    copyButton.addEventListener("click", async () => {
      const svgOutput = document.getElementById("codeOutput");
      const code = svgOutput ? svgOutput.textContent : null;
      if (!code) return alert('Aucun code à copier.');
      try {
        await navigator.clipboard.writeText(code);
        alert('Code SVG copié dans le presse-papiers');
      } catch (err) {
        console.error(err);
        alert('Impossible de copier le code.');
      }
    });
  }
</script>

</Layout>