---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="container mx-auto p-4 space-y-6">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-base-content mb-2">G√©n√©rateur SVG</h1>
      <p class="text-lg text-base-content/70">D√©crivez votre SVG et laissez l'IA le cr√©er pour vous</p>
    </div>
    <!-- bouton save -->
    <button class="btn btn-success btn-lg" id="saveBtn" disabled>
      Enregistrer SVG
    </button>
  </div>

  <!-- Section 1: Input avec textarea et boutons -->
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <h2 class="card-title text-2xl mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
        </svg>
        Prompt
      </h2>
      <div class="form-control">
        <label class="label">
          <span class="label-text">D√©crivez le SVG que vous souhaitez g√©n√©rer</span>
        </label>
        <textarea 
          class="textarea textarea-bordered h-32 resize-none" 
          placeholder="Ex: Un chat bleu avec des yeux verts, assis sur une chaise rouge..."
          id="user-prompt"
        ></textarea>
      </div>
      <div class="card-actions justify-end mt-4 space-x-2">
        <button class="btn btn-primary btn-lg" id="generateBtn">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
          G√©n√©rer SVG
        </button>

        <!-- Nouveau bouton Edit -->
        <button class="btn btn-secondary btn-lg" id="editBtn">
          ‚úèÔ∏è Edit
        </button>
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Section 2: Code g√©n√©r√© -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
          </svg>
          Code SVG
        </h2>
        <div class="mockup-code bg-base-200 min-h-96">
          <pre data-prefix="$" class="text-warning"><code>En attente de g√©n√©ration...</code></pre>
          <pre id="codeOutput" class="hidden"><code></code></pre>
        </div>
        <div class="card-actions justify-end mt-4">
          <button class="btn btn-outline btn-sm" id="copyBtn" disabled>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            Copier
          </button>
        </div>
      </div>
    </div>

    <!-- Section 3: Aper√ßu SVG -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          Aper√ßu SVG
        </h2>
        <div class="border-2 border-dashed border-base-300 rounded-lg min-h-96 flex items-center justify-center bg-base-50" id="svg-container">
          <p class="text-lg font-medium text-base-content/50">Votre SVG appara√Ætra ici</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    // üîπ Historique des √©changes
    let promptList = [];

    async function generateSVG(promptList) {
      const res = await fetch('/api/generateSVG', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messages: promptList }),
      });
      const data = await res.json();
      return data.svg;
    }

    // --- Submit (nouvelle g√©n√©ration) ---
    async function handleSubmit() {
      let prompt = document.getElementById("user-prompt")?.value || "";
      console.log("submitted: ", prompt);

      promptList.length = 0; 
      promptList.push({ role: "user", content: prompt });

      const svgContainer = document.getElementById("svg-container");
      const svgOutput = document.getElementById("codeOutput");
      const generateButton = document.getElementById("generateBtn");

      svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
      generateButton.disabled = true;

      const aiResponse = await generateSVG(promptList);

      const svgMatch = aiResponse.content?.match(/<svg[\s\S]*?<\/svg>/i);
      aiResponse.content = svgMatch ? svgMatch[0] : "";

      promptList.push(aiResponse);

      svgOutput.classList.remove("hidden");
      svgOutput.textContent = aiResponse.content;
      svgContainer.innerHTML = aiResponse.content;

      generateButton.disabled = false;

      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const hasCode = aiResponse.content && String(aiResponse.content).trim().length > 0;
      if (saveBtn) saveBtn.disabled = !hasCode;
      if (copyBtn) copyBtn.disabled = !hasCode;
    }

    // --- Edit (continuer √©dition) ---
    async function handleEdit() {
      let prompt = document.getElementById("user-prompt")?.value || "";
      console.log("Prompt √©dit√©: ", prompt);

      promptList.push({ role: "user", content: prompt });

      const svgContainer = document.getElementById("svg-container");
      const svgOutput = document.getElementById("codeOutput");
      const editButton = document.getElementById("editBtn");
      const generateButton = document.getElementById("generateBtn");

      svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
      generateButton.disabled = true;
      editButton.disabled = true;

      const aiResponse = await generateSVG(promptList);

      const svgMatch = aiResponse.content?.match(/<svg[\s\S]*?<\/svg>/i);
      aiResponse.content = svgMatch ? svgMatch[0] : "";

      promptList.push(aiResponse);

      svgOutput.classList.remove("hidden");
      svgOutput.textContent = aiResponse.content;
      svgContainer.innerHTML = aiResponse.content;

      generateButton.disabled = false;
      editButton.disabled = false;

      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const hasCode = aiResponse.content && String(aiResponse.content).trim().length > 0;
      if (saveBtn) saveBtn.disabled = !hasCode;
      if (copyBtn) copyBtn.disabled = !hasCode;

      console.log("Historique prompts: ", promptList);
    }

    const generateButton = document.getElementById("generateBtn");
    if (generateButton) generateButton.addEventListener("click", handleSubmit);

    const editButton = document.getElementById("editBtn");
    if (editButton) editButton.addEventListener("click", handleEdit);

    // --- Save ---
    async function saveSVG(name, code) {
      const res = await fetch("http://127.0.0.1:8090/api/collections/svgs/records", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: name, code: code }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        console.error("Erreur PocketBase:", errorData);
        throw new Error("Erreur lors de l'enregistrement du SVG");
      }

      return await res.json();
    }

    async function handleSave() {
      const svgOutput = document.getElementById("codeOutput");
      const code = svgOutput.textContent;

      if (!code || !String(code).trim()) {
        alert("Aucun code SVG disponible. G√©n√©rer un SVG d'abord.");
        return;
      }

      const name = prompt("Choisissez un nom pour votre SVG :");
      if (!name) return;

      try {
        const saved = await saveSVG(name, code);
        console.log("SVG enregistr√© :", saved);
        alert("SVG sauvegard√© avec succ√®s !");
      } catch (err) {
        console.error(err);
        const shouldDownload = confirm("Impossible d'enregistrer sur le serveur. Voulez-vous t√©l√©charger le SVG localement ?");
        if (shouldDownload) {
          const blob = new Blob([code], { type: 'image/svg+xml' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = name.replace(/[^a-z0-9-_\.]/gi, '_') + '.svg';
          document.body.appendChild(a);
          a.click();
          a.remove();
          URL.revokeObjectURL(url);
        } else {
          alert("SVG non sauvegard√©.");
        }
      }
    }

    const saveButton = document.getElementById("saveBtn");
    if (saveButton) saveButton.addEventListener("click", handleSave);

    // --- Copy ---
    const copyButton = document.getElementById("copyBtn");
    if (copyButton) {
      copyButton.addEventListener("click", async () => {
        const svgOutput = document.getElementById("codeOutput");
        const code = svgOutput ? svgOutput.textContent : null;
        if (!code) return alert('Aucun code √† copier.');
        try {
          await navigator.clipboard.writeText(code);
          alert('Code SVG copi√© dans le presse-papiers');
        } catch (err) {
          console.error(err);
          alert('Impossible de copier le code.');
        }
      });
    }
  </script>
</Layout>
